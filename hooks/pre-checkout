#!/bin/bash
set -eo pipefail

if [ -n "${IS_VM_HOST-}" ]; then
  echo "VM Host variable set"
  if [ "$IS_VM_HOST" ]; then
    echo "Is VM Host â€“ exiting"
    exit 0
  fi
fi

if [[ $(arch) == "arm64" ]]; then
  MSG="Skipping \`git-s3-cache\`'s \`pre-checkout\` hook because we're running on Apple Silicon Stack"
  echo "$MSG"
  buildkite-agent annotate --style "warning" --context "warnings" --append "$MSG"
  exit 0
fi

# Extract the plugin's configuration properties
# For `repo:`, make sure we have it end with a `/` (removing trailing slash if present, then re-adding one explicitly)
REPO_PATH="${BUILDKITE_PLUGIN_GIT_S3_CACHE_REPO%/}"/
BUCKET="$BUILDKITE_PLUGIN_GIT_S3_CACHE_BUCKET"
ERRORS_ARRAY=()

echo "--- ðŸ“¦ Restoring cache for $REPO_PATH from $BUCKET"

DESTINATION=/tmp/$BUILDKITE_PIPELINE_SLUG.git.tar

git_mirror_download () {
  echo "Using Git Mirror Server at $GIT_MIRROR_SERVER_ROOT"
  # The manifest file has each cached repo on a line, in the org/name/id
  # format.
  #
  # E.g.:
  #
  #   automattic/pocket-casts-ios/2022-07-16.git.tar
  #   automattic/tumblr-ios/2022-07-16.git.tar
  #   ...
  #
  # To find the path for the current repo, we `grep` for its name at the start
  # of the line, using `^`. Similar to looking up the S3 bucket, the entries in
  # the manifest are reverse sorted (as they should contain a date string after
  # the `REPO_PATH`) so that the most recent cache gets downloaded.
  if URL=$(curl "$GIT_MIRROR_SERVER_ROOT/manifest" | grep ^"$REPO_PATH" | sort -r | head -n1); then
    echo "Downloading snapshot $URL to $DESTINATION"
    curl -so "$DESTINATION" "$GIT_MIRROR_SERVER_ROOT/$URL"
    MIRROR_XFER_STATUS=$?
    if [ $MIRROR_XFER_STATUS == 0 ]; then
      echo "~~~ :large_green_circle: Cache download successful!"
      return 0
    else
      # we failed, exit
      return 2
    fi
  else
    echo "  â†³ WARNING: No snapshots found in $GIT_MIRROR_SERVER_ROOT. Will attempt s3."
    ERRORS_ARRAY+=("- WARNING: No snapshots found in $GIT_MIRROR_SERVER_ROOT. Will attempt s3.")
    return 1
  fi
}

s3_download () {
  # Fetch the most recent S3 backup key
  SNAPSHOT_KEY=$(aws --output json s3api list-objects-v2 --bucket "$BUCKET" --prefix "$REPO_PATH" --query 'Contents[].Key' | jq -sr 'sort[] | reverse[] | select(endswith(".git.tar"))' | head -n1 )

  # Exit early if there's no available snapshot
  if [ -z "$SNAPSHOT_KEY" ]; then
    echo "  â†³ WARNING: No snapshots found in $BUCKET"
    ERRORS_ARRAY+=("- WARNING: No snapshots found in $BUCKET")
    return 1
  fi

 # Extract the first 2 components of the key, then compare it with the provided `REPO_PATH` (which ends with a `/`)
 # Note that the `SNAPSHOT_KEY` can follow either the `<bucket>/<project>/<date>.git.tar` or `<bucket>/<project>/<date>/<project.git.tar` structure
 SNAPSHOT_KEY_CHECK=$(echo "$SNAPSHOT_KEY" | cut -d "/" -f 1-2)
  if [ "${SNAPSHOT_KEY_CHECK}/" == "${REPO_PATH}" ]; then
    echo "Downloading snapshot: $SNAPSHOT_KEY to $DESTINATION"
    # Then download it
    rm -rf "$DESTINATION" # Delete before starting, just in case
    aws s3 cp "s3://$BUCKET/$SNAPSHOT_KEY" "$DESTINATION" --no-progress
    S3_XFER_STATUS=$?
    if [ $S3_XFER_STATUS == 0 ]; then
      echo "~~~ :large_green_circle: S3 Download Succeeded"
      return 0
    else
      # s3 download failed, error message is below.
      return 2
    fi
  else
    echo "  â†³ WARNING: Nothing downloaded. $SNAPSHOT_KEY is not the same as $REPO_PATH (comparison used $SNAPSHOT_KEY_CHECK)"
    ERRORS_ARRAY+=("- WARNING: Nothing downloaded. $SNAPSHOT_KEY is not the same as $REPO_PATH")
    return 1
  fi
}

annotate_error() {
  ERRORS_ARRAY=("$@")
  ERRORS=$(
    for error in "${ERRORS_ARRAY[@]}"
    do
      echo "$error"
    done
  )

  buildkite-agent annotate --style "warning" --context "warnings" --append \
"
Step **$BUILDKITE_LABEL** had _WARNINGS_!
Agent: **$BUILDKITE_AGENT_NAME** <br>
There were warnings in your build indicating the repo was expected to be cached, but wasn't found.<br>
Please ensure your repo is properly cached via the [a8c-ci-toolkit-buildkite-plugin](https://github.com/Automattic/a8c-ci-toolkit-buildkite-plugin)'s \`cache_repo\` command.
\`\`\`
Errors:
${ERRORS}
\`\`\`
"
}

annotate() {
  if [ -n "${ERRORS_ARRAY[*]}" ]; then
    annotate_error "${ERRORS_ARRAY[@]}"
  fi
}

###### BEGIN ######

# If we have an available Git Mirror Server, use it
if [ -n "${GIT_MIRROR_SERVER_ROOT:-}" ]; then
  echo "~~~ Git mirror found, attempting download."
  if ! git_mirror_download; then
    echo "~~~ :warning: Git Mirror download failed, attempting download from s3...."
    ERRORS_ARRAY+=("- Git Mirror download failed, attempting download from s3.")
    if ! s3_download; then
      echo "--- :warning: S3 Download failed. This probably means the cache may not exist yet."
      echo "  â†³ Full error: $S3_XFER_STATUS"
      ERRORS_ARRAY+=("- S3 Download failed as well. Cache may not exist yet. Full error: $S3_XFER_STATUS ")
      annotate
      exit 0
    fi
  fi
# Otherwise, use S3 directly
else
  if ! s3_download; then
    echo "--- :warning: S3 Download failed. This probably means the cache may not exist yet."
    echo "  â†³ Full error: $S3_XFER_STATUS"
    ERRORS_ARRAY+=("- S3 Download failed as well. Cache may not exist yet. Full error: $S3_XFER_STATUS ")
    annotate
    exit 0
  fi
fi

annotate

SIZE=$(du -sh "$DESTINATION"  | cut -f1 -d$'\t')

echo "Downloaded $SIZE"

REFERENCE_REPO="/tmp/$BUILDKITE_PIPELINE_SLUG.git"

echo "Decompressing $DESTINATION to $REFERENCE_REPO"
tar -xf "$DESTINATION" -C /tmp
rm "$DESTINATION"

ls /tmp
ls "$REFERENCE_REPO"

# Overwrite the clone flags to use the reference
export BUILDKITE_GIT_CLONE_FLAGS="-v --reference $REFERENCE_REPO"
